# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
    pull_request:
    push:

jobs:
    build-for-linux:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout out repo
              uses: actions/checkout@v4

            - name: Build an image containing everything needed for building the library
              run: docker build --tag builder build-for-linux.Dockerfile

            - name: Build binaries
              run: docker run --rm --volume .:/app builder

            - name: Publish the package
              run: npm publish --provenance ./dist-pack/latest.tgz

            - name: "Linux only: Install GCC 15"
              if: matrix.os_and_compiler == 'ubuntu-gcc'
              shell: bash
              run: |
                  docker

            - name: Set reusable strings
              # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                  echo "preset_name=${{ matrix.debug_or_release }}-${{ matrix.compiler }}" >> "$GITHUB_OUTPUT"
                  echo "build_output_dir=${{ github.workspace }}/build/${preset_name}" >> "$GITHUB_OUTPUT"

            - name: Create output directory
              run: |
                  mkdir -p ${{ steps.strings.outputs.build_output_dir }}

            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: >
                  cmake
                  -S .
                  --preset=${{ steps.strings.outputs.preset_name }}

            - name: "Build an image containing everything needed for building the library"
              run: docker compose -f ci-pack.docker-compose.yml build

            - name: "Pack"
              run: docker compose -f ci-pack.docker-compose.yml run --rm ci-pack

            - name: "Publish the package"
              run: npm publish --provenance ./dist-pack/latest.tgz

            - name: Build
              # Build your program with the given configuration
              run: cmake --build --preset=${{ steps.strings.outputs.preset_name }}

            - name: Test
              working-directory: ${{ steps.strings.outputs.build_output_dir }}
              # Execute tests defined by the CMake configuration
              # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
              run: ctest --build-config ${{ steps.strings.outputs.preset_name }}

            - name: Archiving
              # Default Build Artifact zipper does not retain file permission.
              run: 7z a OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}.7z tools

            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v4.3.1
              with:
                  name: OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}
                  path: OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}.7z

    build-for-macos-and-windows:
        runs-on: ${{ matrix.os }}

        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: false

            # Set up a matrix to run the following 3 configurations:
            # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
            # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
            # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
            #
            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os_and_compiler: [
                        # No Windows support yet...
                        # windows-msvc,
                        macos-clang,
                        ubuntu-gcc,
                    ]
                include:
                    - os_and_compiler: macos-clang
                      os: macos-16
                      debug_or_release: release
                      compiler: macos-clang20-homebrew
                    - os_and_compiler: ubuntu-gcc
                      os: ubuntu-latest
                      debug_or_release: release
                      compiler: linux-gcc15
                    # No Windows support yet...
                    # - os_and_compiler: windows-msvc
                    #   os: windows-latest
                    #   debug_or_release: release
                    #   compiler: windows-msvc

        steps:
            - name: Checkout out repo
              uses: actions/checkout@v4

            - name: "Linux only: Install GCC 15"
              if: matrix.os_and_compiler == 'ubuntu-gcc'
              shell: bash
              run: |
                  sudo add-apt-repository universe
                  sudo apt update
                  sudo apt install gcc-15 g++-15

            - name: Set reusable strings
              # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
              id: strings
              shell: bash
              run: |
                  echo "preset_name=${{ matrix.debug_or_release }}-${{ matrix.compiler }}" >> "$GITHUB_OUTPUT"
                  echo "build_output_dir=${{ github.workspace }}/build/${preset_name}" >> "$GITHUB_OUTPUT"

            - name: Create output directory
              run: |
                  mkdir -p ${{ steps.strings.outputs.build_output_dir }}

            - name: Configure CMake
              # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
              # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
              run: >
                  cmake
                  -S .
                  --preset=${{ steps.strings.outputs.preset_name }}

            - name: Build
              # Build your program with the given configuration
              run: cmake --build --preset=${{ steps.strings.outputs.preset_name }}

            - name: Test
              working-directory: ${{ steps.strings.outputs.build_output_dir }}
              # Execute tests defined by the CMake configuration
              # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
              run: ctest --build-config ${{ steps.strings.outputs.preset_name }}

            - name: Archiving
              # Default Build Artifact zipper does not retain file permission.
              run: 7z a OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}.7z tools

            - name: Upload a Build Artifact
              uses: actions/upload-artifact@v4.3.1
              with:
                  name: OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}
                  path: OHLT-${{ matrix.os_and_compiler }}-${{ matrix.debug_or_release }}.7z
